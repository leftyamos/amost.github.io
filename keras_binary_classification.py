# -*- coding: utf-8 -*-
"""Keras Binary Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1G9SYBeKl-h3yCL4QGzBL5CMyCKa3Sd

https://machinelearningmastery.com/binary-classification-tutorial-with-the-keras-deep-learning-library/
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# %matplotlib inline

cols = [f'Pattern{x}' for x in range(1,61)]
cols.append('Label')

data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/undocumented/connectionist-bench/sonar/sonar.all-data',names=cols)

data.head()

data.info()

data['Label'].unique()

data.describe()

"""## EDA

## Data Preprocessing
"""

x = data.drop('Label',axis=1)

y = data['Label']

# encode label
from sklearn import preprocessing

le = preprocessing.LabelEncoder()

y = le.fit_transform(y)

"""## Model 1 : Non-scaling"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

"""#### Example method"""

from tensorflow.keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold

# baseline model
def create_baseline():


	# create model
	model = Sequential()
 
	model.add(Dense(60, input_dim=60, activation='relu'))
	model.add(Dense(1, activation='sigmoid'))
 

	# Compile model
	model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
 
 
	return model

# evaluate model with standardized dataset
estimator = KerasClassifier(build_fn=create_baseline, epochs=100, batch_size=5, verbose=0)

kfold = StratifiedKFold(n_splits=10, shuffle=True)

results = cross_val_score(estimator, x, y, cv=kfold)

print("Baseline: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))

"""#### My method"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.3,random_state=101)

# create model
model = Sequential()
 
model.add(Dense(60, input_dim=60, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
 

# Compile model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(x=X_train,
          y=y_train,
          epochs=100,
          batch_size=5,
          verbose=1)

model_loss = pd.DataFrame(model.history.history)

model_loss.plot()

"""## Model 2 : With Data Preparation"""

# encode features
from sklearn.preprocessing import StandardScaler

"""#### Example method"""

from tensorflow.keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold

# create a pipeline
from sklearn.pipeline import Pipeline

# evaluate baseline model with standardized dataset
estimators = []

estimators.append(('standardize', StandardScaler()))
estimators.append(('mlp', KerasClassifier(build_fn=create_baseline, epochs=100, batch_size=5, verbose=0)))

pipeline = Pipeline(estimators)

kfold = StratifiedKFold(n_splits=10, shuffle=True)

results = cross_val_score(pipeline, x, y, cv=kfold)

print("Standardized: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))

"""#### My method"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.3,random_state=101)

scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)

# create model
model = Sequential()
 
model.add(Dense(60, input_dim=60, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
 

# Compile model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(x=X_train,
          y=y_train,
          epochs=100,
          batch_size=5,
          verbose=1)

model_loss = pd.DataFrame(model.history.history)

model_loss.plot()

"""## Model 3 : Evaluate a Smaller Network

#### Example method
"""

# smaller model
def create_smaller():


	# create model
	model = Sequential()
 
	model.add(Dense(30, input_dim=60, activation='relu'))
	model.add(Dense(1, activation='sigmoid'))
 

	# Compile model
	model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
 
 
	return model

estimators = []

estimators.append(('standardize', StandardScaler()))
estimators.append(('mlp', KerasClassifier(build_fn=create_smaller, epochs=100, batch_size=5, verbose=0)))

pipeline = Pipeline(estimators)

kfold = StratifiedKFold(n_splits=10, shuffle=True)

results = cross_val_score(pipeline, x, y, cv=kfold)

print("Smaller: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))

"""#### My method"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.3,random_state=101)

scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)

# create model
model = Sequential()
 
model.add(Dense(30, input_dim=60, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
 

# Compile model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(x=X_train,
          y=y_train,
          epochs=100,
          batch_size=5,
          verbose=1)

model_loss = pd.DataFrame(model.history.history)

model_loss.plot()

"""## Model 4 : Evaluate a Larger Network

#### Example method
"""

# larger model
def create_larger():


	# create model
	model = Sequential()
 
	model.add(Dense(60, input_dim=60, activation='relu'))
	model.add(Dense(30, activation='relu'))
	model.add(Dense(1, activation='sigmoid'))
 

	# Compile model
	model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
 

	return model

estimators = []

estimators.append(('standardize', StandardScaler()))
estimators.append(('mlp', KerasClassifier(build_fn=create_larger, epochs=100, batch_size=5, verbose=0)))

pipeline = Pipeline(estimators)

kfold = StratifiedKFold(n_splits=10, shuffle=True)


results = cross_val_score(pipeline, x, y, cv=kfold)

print("Larger: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))

"""#### My method"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.3,random_state=101)

scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)

# create model
model = Sequential()
 
model.add(Dense(60, input_dim=60, activation='relu'))
model.add(Dense(30, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
 
 
# Compile model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

a = model.fit(x=X_train,
          y=y_train,
          epochs=100,
          batch_size=5,
          verbose=1)

model_loss = pd.DataFrame(model.history.history)

model_loss.plot()

model.summary()

